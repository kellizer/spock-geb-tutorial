apply plugin: 'groovy'
apply plugin: 'jetty'


repositories
        {
            mavenCentral()
        }

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

// The drivers we want to use
ext.drivers = ["chrome"]


configurations
        {
            integrationTest.extendsFrom testCompile
        }


dependencies
        {
            def gebVersion = "0.9.0-RC-3"
            def seleniumVersion = "2.35.0"

            testCompile "org.gebish:geb-spock:$gebVersion"
            compile "joda-time:joda-time:2+"
            testCompile "junit:junit:4+"
            testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
            testRuntime "com.h2database:h2:1.2.147"

            // Drivers
            drivers.each { driver ->
                testCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
            }

            // Servlet Api
            providedCompile "javax.servlet:javax.servlet-api:3.1.0"
            compile "javax.servlet:jstl:1.2"
        }

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        testReportDir = reporting.file("$name/tests")
        testResultsDir = file("$buildDir/test-results/$name")

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver
    }
}


test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

jettyRunWar {
    contextPath = '/'
    httpPort = 9999
}


jettyRunWar.doFirst {
    println ""
    println "******************************************************"
    println "You can access the app on your browser through the url"
    println "  http://localhost:9999/login"
    println ""
    println "In order to stop the server, press Ctrl+C"
    println "******************************************************"
    println ""
}

sourceSets
        {
            integrationTest
                    {
                        groovy.srcDir file("src/intTest/groovy")
                        resources.srcDir file("src/intTest/resources")
                        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
                        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
                    }
        }
